Terminals unused in grammar

   "newline"
   CHAR


State 80 conflicts: 12 shift/reduce
State 106 conflicts: 12 shift/reduce
State 107 conflicts: 12 shift/reduce
State 108 conflicts: 12 shift/reduce
State 109 conflicts: 12 shift/reduce
State 110 conflicts: 12 shift/reduce
State 111 conflicts: 12 shift/reduce
State 112 conflicts: 12 shift/reduce
State 113 conflicts: 12 shift/reduce
State 114 conflicts: 12 shift/reduce
State 115 conflicts: 12 shift/reduce
State 116 conflicts: 12 shift/reduce
State 117 conflicts: 12 shift/reduce


Grammar

    0 $accept: program "end of file"

    1 program: declList

    2 declList: declList decl
    3         | %empty

    4 decl: varDecl
    5     | structDecl
    6     | fnDecl

    7 varDecl: type id SEMICOLON

    8 fnDecl: type id formals fnBody

    9 structDecl: STRUCT id LCURLY structBody RCURLY SEMICOLON

   10 structBody: structBody varDecl
   11           | varDecl

   12 formals: LPAREN RPAREN
   13        | LPAREN formalsList RPAREN

   14 formalsList: formalDecl
   15            | formalDecl COMMA formalsList

   16 formalDecl: type id

   17 fnBody: LCURLY declList stmtList RCURLY

   18 stmtList: stmtList stmt
   19         | %empty

   20 stmt: assignExp SEMICOLON
   21     | loc PLUSPLUS SEMICOLON
   22     | loc MINUSMINUS SEMICOLON
   23     | INPUT READ loc SEMICOLON
   24     | OUTPUT WRITE exp SEMICOLON
   25     | IF LPAREN exp RPAREN LCURLY declList stmtList RCURLY
   26     | IF LPAREN exp RPAREN LCURLY declList stmtList RCURLY ELSE LCURLY declList stmtList RCURLY
   27     | WHILE LPAREN exp RPAREN LCURLY declList stmtList RCURLY
   28     | RETURN exp SEMICOLON
   29     | RETURN SEMICOLON
   30     | fncall SEMICOLON

   31 exp: exp PLUS exp
   32    | exp MINUS exp
   33    | exp TIMES exp
   34    | exp DIVIDE exp
   35    | NOT exp
   36    | exp AND exp
   37    | exp OR exp
   38    | exp EQUALS exp
   39    | exp NOTEQUALS exp
   40    | exp LESS exp
   41    | exp GREATER exp
   42    | exp LESSEQ exp
   43    | exp GREATEREQ exp
   44    | MINUS term
   45    | term

   46 assignExp: loc ASSIGN exp

   47 term: loc
   48     | INTLITERAL
   49     | STRINGLITERAL
   50     | TRUE
   51     | FALSE
   52     | LPAREN exp RPAREN
   53     | fncall

   54 fncall: id LPAREN RPAREN
   55       | id LPAREN actualList RPAREN

   56 actualList: exp
   57           | actualList COMMA exp

   58 type: INT
   59     | BOOL
   60     | VOID

   61 loc: id
   62    | loc DOT id

   63 id: ID


Terminals, with rules where they appear

"end of file" (0) 0
error (256)
"newline" (258)
CHAR (259)
BOOL (260) 59
INT (261) 58
VOID (262) 60
TRUE (263) 50
FALSE (264) 51
STRUCT (265) 9
INPUT (266) 23
OUTPUT (267) 24
IF (268) 25 26
ELSE (269) 26
WHILE (270) 27
RETURN (271) 28 29
ID (272) 63
INTLITERAL (273) 48
STRINGLITERAL (274) 49
LCURLY (275) 9 17 25 26 27
RCURLY (276) 9 17 25 26 27
LPAREN (277) 12 13 25 26 27 52 54 55
RPAREN (278) 12 13 25 26 27 52 54 55
SEMICOLON (279) 7 9 20 21 22 23 24 28 29 30
COMMA (280) 15 57
DOT (281) 62
WRITE (282) 24
READ (283) 23
PLUSPLUS (284) 21
MINUSMINUS (285) 22
PLUS (286) 31
MINUS (287) 32 44
TIMES (288) 33
DIVIDE (289) 34
NOT (290) 35
AND (291) 36
OR (292) 37
EQUALS (293) 38
NOTEQUALS (294) 39
LESS (295) 40
GREATER (296) 41
LESSEQ (297) 42
GREATEREQ (298) 43
ASSIGN (299) 46


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1, on right: 0
declList (47)
    on left: 2 3, on right: 1 2 17 25 26 27
decl (48)
    on left: 4 5 6, on right: 2
varDecl (49)
    on left: 7, on right: 4 10 11
fnDecl (50)
    on left: 8, on right: 6
structDecl (51)
    on left: 9, on right: 5
structBody (52)
    on left: 10 11, on right: 9 10
formals (53)
    on left: 12 13, on right: 8
formalsList (54)
    on left: 14 15, on right: 13 15
formalDecl (55)
    on left: 16, on right: 14 15
fnBody (56)
    on left: 17, on right: 8
stmtList (57)
    on left: 18 19, on right: 17 18 25 26 27
stmt (58)
    on left: 20 21 22 23 24 25 26 27 28 29 30, on right: 18
exp (59)
    on left: 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45, on right:
    24 25 26 27 28 31 32 33 34 35 36 37 38 39 40 41 42 43 46 52 56
    57
assignExp (60)
    on left: 46, on right: 20
term (61)
    on left: 47 48 49 50 51 52 53, on right: 44 45
fncall (62)
    on left: 54 55, on right: 30 53
actualList (63)
    on left: 56 57, on right: 55 57
type (64)
    on left: 58 59 60, on right: 7 8 16
loc (65)
    on left: 61 62, on right: 21 22 23 46 47 62
id (66)
    on left: 63, on right: 7 8 9 16 54 55 61 62


State 0

    0 $accept: . program "end of file"

    $default  reduce using rule 3 (declList)

    program   go to state 1
    declList  go to state 2


State 1

    0 $accept: program . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 program: declList .
    2 declList: declList . decl

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 7

    $default  reduce using rule 1 (program)

    decl        go to state 8
    varDecl     go to state 9
    fnDecl      go to state 10
    structDecl  go to state 11
    type        go to state 12


State 3

    0 $accept: program "end of file" .

    $default  accept


State 4

   59 type: BOOL .

    $default  reduce using rule 59 (type)


State 5

   58 type: INT .

    $default  reduce using rule 58 (type)


State 6

   60 type: VOID .

    $default  reduce using rule 60 (type)


State 7

    9 structDecl: STRUCT . id LCURLY structBody RCURLY SEMICOLON

    ID  shift, and go to state 13

    id  go to state 14


State 8

    2 declList: declList decl .

    $default  reduce using rule 2 (declList)


State 9

    4 decl: varDecl .

    $default  reduce using rule 4 (decl)


State 10

    6 decl: fnDecl .

    $default  reduce using rule 6 (decl)


State 11

    5 decl: structDecl .

    $default  reduce using rule 5 (decl)


State 12

    7 varDecl: type . id SEMICOLON
    8 fnDecl: type . id formals fnBody

    ID  shift, and go to state 13

    id  go to state 15


State 13

   63 id: ID .

    $default  reduce using rule 63 (id)


State 14

    9 structDecl: STRUCT id . LCURLY structBody RCURLY SEMICOLON

    LCURLY  shift, and go to state 16


State 15

    7 varDecl: type id . SEMICOLON
    8 fnDecl: type id . formals fnBody

    LPAREN     shift, and go to state 17
    SEMICOLON  shift, and go to state 18

    formals  go to state 19


State 16

    9 structDecl: STRUCT id LCURLY . structBody RCURLY SEMICOLON

    BOOL  shift, and go to state 4
    INT   shift, and go to state 5
    VOID  shift, and go to state 6

    varDecl     go to state 20
    structBody  go to state 21
    type        go to state 22


State 17

   12 formals: LPAREN . RPAREN
   13        | LPAREN . formalsList RPAREN

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    RPAREN  shift, and go to state 23

    formalsList  go to state 24
    formalDecl   go to state 25
    type         go to state 26


State 18

    7 varDecl: type id SEMICOLON .

    $default  reduce using rule 7 (varDecl)


State 19

    8 fnDecl: type id formals . fnBody

    LCURLY  shift, and go to state 27

    fnBody  go to state 28


State 20

   11 structBody: varDecl .

    $default  reduce using rule 11 (structBody)


State 21

    9 structDecl: STRUCT id LCURLY structBody . RCURLY SEMICOLON
   10 structBody: structBody . varDecl

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    RCURLY  shift, and go to state 29

    varDecl  go to state 30
    type     go to state 22


State 22

    7 varDecl: type . id SEMICOLON

    ID  shift, and go to state 13

    id  go to state 31


State 23

   12 formals: LPAREN RPAREN .

    $default  reduce using rule 12 (formals)


State 24

   13 formals: LPAREN formalsList . RPAREN

    RPAREN  shift, and go to state 32


State 25

   14 formalsList: formalDecl .
   15            | formalDecl . COMMA formalsList

    COMMA  shift, and go to state 33

    $default  reduce using rule 14 (formalsList)


State 26

   16 formalDecl: type . id

    ID  shift, and go to state 13

    id  go to state 34


State 27

   17 fnBody: LCURLY . declList stmtList RCURLY

    $default  reduce using rule 3 (declList)

    declList  go to state 35


State 28

    8 fnDecl: type id formals fnBody .

    $default  reduce using rule 8 (fnDecl)


State 29

    9 structDecl: STRUCT id LCURLY structBody RCURLY . SEMICOLON

    SEMICOLON  shift, and go to state 36


State 30

   10 structBody: structBody varDecl .

    $default  reduce using rule 10 (structBody)


State 31

    7 varDecl: type id . SEMICOLON

    SEMICOLON  shift, and go to state 18


State 32

   13 formals: LPAREN formalsList RPAREN .

    $default  reduce using rule 13 (formals)


State 33

   15 formalsList: formalDecl COMMA . formalsList

    BOOL  shift, and go to state 4
    INT   shift, and go to state 5
    VOID  shift, and go to state 6

    formalsList  go to state 37
    formalDecl   go to state 25
    type         go to state 26


State 34

   16 formalDecl: type id .

    $default  reduce using rule 16 (formalDecl)


State 35

    2 declList: declList . decl
   17 fnBody: LCURLY declList . stmtList RCURLY

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 7

    $default  reduce using rule 19 (stmtList)

    decl        go to state 8
    varDecl     go to state 9
    fnDecl      go to state 10
    structDecl  go to state 11
    stmtList    go to state 38
    type        go to state 12


State 36

    9 structDecl: STRUCT id LCURLY structBody RCURLY SEMICOLON .

    $default  reduce using rule 9 (structDecl)


State 37

   15 formalsList: formalDecl COMMA formalsList .

    $default  reduce using rule 15 (formalsList)


State 38

   17 fnBody: LCURLY declList stmtList . RCURLY
   18 stmtList: stmtList . stmt

    INPUT   shift, and go to state 39
    OUTPUT  shift, and go to state 40
    IF      shift, and go to state 41
    WHILE   shift, and go to state 42
    RETURN  shift, and go to state 43
    ID      shift, and go to state 13
    RCURLY  shift, and go to state 44

    stmt       go to state 45
    assignExp  go to state 46
    fncall     go to state 47
    loc        go to state 48
    id         go to state 49


State 39

   23 stmt: INPUT . READ loc SEMICOLON

    READ  shift, and go to state 50


State 40

   24 stmt: OUTPUT . WRITE exp SEMICOLON

    WRITE  shift, and go to state 51


State 41

   25 stmt: IF . LPAREN exp RPAREN LCURLY declList stmtList RCURLY
   26     | IF . LPAREN exp RPAREN LCURLY declList stmtList RCURLY ELSE LCURLY declList stmtList RCURLY

    LPAREN  shift, and go to state 52


State 42

   27 stmt: WHILE . LPAREN exp RPAREN LCURLY declList stmtList RCURLY

    LPAREN  shift, and go to state 53


State 43

   28 stmt: RETURN . exp SEMICOLON
   29     | RETURN . SEMICOLON

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    SEMICOLON      shift, and go to state 59
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 62
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 44

   17 fnBody: LCURLY declList stmtList RCURLY .

    $default  reduce using rule 17 (fnBody)


State 45

   18 stmtList: stmtList stmt .

    $default  reduce using rule 18 (stmtList)


State 46

   20 stmt: assignExp . SEMICOLON

    SEMICOLON  shift, and go to state 66


State 47

   30 stmt: fncall . SEMICOLON

    SEMICOLON  shift, and go to state 67


State 48

   21 stmt: loc . PLUSPLUS SEMICOLON
   22     | loc . MINUSMINUS SEMICOLON
   46 assignExp: loc . ASSIGN exp
   62 loc: loc . DOT id

    DOT         shift, and go to state 68
    PLUSPLUS    shift, and go to state 69
    MINUSMINUS  shift, and go to state 70
    ASSIGN      shift, and go to state 71


State 49

   54 fncall: id . LPAREN RPAREN
   55       | id . LPAREN actualList RPAREN
   61 loc: id .

    LPAREN  shift, and go to state 72

    $default  reduce using rule 61 (loc)


State 50

   23 stmt: INPUT READ . loc SEMICOLON

    ID  shift, and go to state 13

    loc  go to state 73
    id   go to state 74


State 51

   24 stmt: OUTPUT WRITE . exp SEMICOLON

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 75
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 52

   25 stmt: IF LPAREN . exp RPAREN LCURLY declList stmtList RCURLY
   26     | IF LPAREN . exp RPAREN LCURLY declList stmtList RCURLY ELSE LCURLY declList stmtList RCURLY

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 76
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 53

   27 stmt: WHILE LPAREN . exp RPAREN LCURLY declList stmtList RCURLY

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 77
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 54

   50 term: TRUE .

    $default  reduce using rule 50 (term)


State 55

   51 term: FALSE .

    $default  reduce using rule 51 (term)


State 56

   48 term: INTLITERAL .

    $default  reduce using rule 48 (term)


State 57

   49 term: STRINGLITERAL .

    $default  reduce using rule 49 (term)


State 58

   52 term: LPAREN . exp RPAREN

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 78
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 59

   29 stmt: RETURN SEMICOLON .

    $default  reduce using rule 29 (stmt)


State 60

   44 exp: MINUS . term

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58

    term    go to state 79
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 61

   35 exp: NOT . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 80
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 62

   28 stmt: RETURN exp . SEMICOLON
   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    SEMICOLON  shift, and go to state 81
    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93


State 63

   45 exp: term .

    $default  reduce using rule 45 (exp)


State 64

   53 term: fncall .

    $default  reduce using rule 53 (term)


State 65

   47 term: loc .
   62 loc: loc . DOT id

    DOT  shift, and go to state 68

    $default  reduce using rule 47 (term)


State 66

   20 stmt: assignExp SEMICOLON .

    $default  reduce using rule 20 (stmt)


State 67

   30 stmt: fncall SEMICOLON .

    $default  reduce using rule 30 (stmt)


State 68

   62 loc: loc DOT . id

    ID  shift, and go to state 13

    id  go to state 94


State 69

   21 stmt: loc PLUSPLUS . SEMICOLON

    SEMICOLON  shift, and go to state 95


State 70

   22 stmt: loc MINUSMINUS . SEMICOLON

    SEMICOLON  shift, and go to state 96


State 71

   46 assignExp: loc ASSIGN . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 97
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 72

   54 fncall: id LPAREN . RPAREN
   55       | id LPAREN . actualList RPAREN

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    RPAREN         shift, and go to state 98
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp         go to state 99
    term        go to state 63
    fncall      go to state 64
    actualList  go to state 100
    loc         go to state 65
    id          go to state 49


State 73

   23 stmt: INPUT READ loc . SEMICOLON
   62 loc: loc . DOT id

    SEMICOLON  shift, and go to state 101
    DOT        shift, and go to state 68


State 74

   61 loc: id .

    $default  reduce using rule 61 (loc)


State 75

   24 stmt: OUTPUT WRITE exp . SEMICOLON
   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    SEMICOLON  shift, and go to state 102
    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93


State 76

   25 stmt: IF LPAREN exp . RPAREN LCURLY declList stmtList RCURLY
   26     | IF LPAREN exp . RPAREN LCURLY declList stmtList RCURLY ELSE LCURLY declList stmtList RCURLY
   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    RPAREN     shift, and go to state 103
    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93


State 77

   27 stmt: WHILE LPAREN exp . RPAREN LCURLY declList stmtList RCURLY
   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    RPAREN     shift, and go to state 104
    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93


State 78

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp
   52 term: LPAREN exp . RPAREN

    RPAREN     shift, and go to state 105
    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93


State 79

   44 exp: MINUS term .

    $default  reduce using rule 44 (exp)


State 80

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   35    | NOT exp .
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 35 (exp)]
    MINUS      [reduce using rule 35 (exp)]
    TIMES      [reduce using rule 35 (exp)]
    DIVIDE     [reduce using rule 35 (exp)]
    AND        [reduce using rule 35 (exp)]
    OR         [reduce using rule 35 (exp)]
    EQUALS     [reduce using rule 35 (exp)]
    NOTEQUALS  [reduce using rule 35 (exp)]
    LESS       [reduce using rule 35 (exp)]
    GREATER    [reduce using rule 35 (exp)]
    LESSEQ     [reduce using rule 35 (exp)]
    GREATEREQ  [reduce using rule 35 (exp)]
    $default   reduce using rule 35 (exp)


State 81

   28 stmt: RETURN exp SEMICOLON .

    $default  reduce using rule 28 (stmt)


State 82

   31 exp: exp PLUS . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 106
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 83

   32 exp: exp MINUS . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 107
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 84

   33 exp: exp TIMES . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 108
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 85

   34 exp: exp DIVIDE . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 109
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 86

   36 exp: exp AND . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 110
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 87

   37 exp: exp OR . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 111
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 88

   38 exp: exp EQUALS . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 112
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 89

   39 exp: exp NOTEQUALS . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 113
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 90

   40 exp: exp LESS . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 114
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 91

   41 exp: exp GREATER . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 115
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 92

   42 exp: exp LESSEQ . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 116
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 93

   43 exp: exp GREATEREQ . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 117
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 94

   62 loc: loc DOT id .

    $default  reduce using rule 62 (loc)


State 95

   21 stmt: loc PLUSPLUS SEMICOLON .

    $default  reduce using rule 21 (stmt)


State 96

   22 stmt: loc MINUSMINUS SEMICOLON .

    $default  reduce using rule 22 (stmt)


State 97

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp
   46 assignExp: loc ASSIGN exp .

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    $default  reduce using rule 46 (assignExp)


State 98

   54 fncall: id LPAREN RPAREN .

    $default  reduce using rule 54 (fncall)


State 99

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp
   56 actualList: exp .

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    $default  reduce using rule 56 (actualList)


State 100

   55 fncall: id LPAREN actualList . RPAREN
   57 actualList: actualList . COMMA exp

    RPAREN  shift, and go to state 118
    COMMA   shift, and go to state 119


State 101

   23 stmt: INPUT READ loc SEMICOLON .

    $default  reduce using rule 23 (stmt)


State 102

   24 stmt: OUTPUT WRITE exp SEMICOLON .

    $default  reduce using rule 24 (stmt)


State 103

   25 stmt: IF LPAREN exp RPAREN . LCURLY declList stmtList RCURLY
   26     | IF LPAREN exp RPAREN . LCURLY declList stmtList RCURLY ELSE LCURLY declList stmtList RCURLY

    LCURLY  shift, and go to state 120


State 104

   27 stmt: WHILE LPAREN exp RPAREN . LCURLY declList stmtList RCURLY

    LCURLY  shift, and go to state 121


State 105

   52 term: LPAREN exp RPAREN .

    $default  reduce using rule 52 (term)


State 106

   31 exp: exp . PLUS exp
   31    | exp PLUS exp .
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 31 (exp)]
    MINUS      [reduce using rule 31 (exp)]
    TIMES      [reduce using rule 31 (exp)]
    DIVIDE     [reduce using rule 31 (exp)]
    AND        [reduce using rule 31 (exp)]
    OR         [reduce using rule 31 (exp)]
    EQUALS     [reduce using rule 31 (exp)]
    NOTEQUALS  [reduce using rule 31 (exp)]
    LESS       [reduce using rule 31 (exp)]
    GREATER    [reduce using rule 31 (exp)]
    LESSEQ     [reduce using rule 31 (exp)]
    GREATEREQ  [reduce using rule 31 (exp)]
    $default   reduce using rule 31 (exp)


State 107

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   32    | exp MINUS exp .
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 32 (exp)]
    MINUS      [reduce using rule 32 (exp)]
    TIMES      [reduce using rule 32 (exp)]
    DIVIDE     [reduce using rule 32 (exp)]
    AND        [reduce using rule 32 (exp)]
    OR         [reduce using rule 32 (exp)]
    EQUALS     [reduce using rule 32 (exp)]
    NOTEQUALS  [reduce using rule 32 (exp)]
    LESS       [reduce using rule 32 (exp)]
    GREATER    [reduce using rule 32 (exp)]
    LESSEQ     [reduce using rule 32 (exp)]
    GREATEREQ  [reduce using rule 32 (exp)]
    $default   reduce using rule 32 (exp)


State 108

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   33    | exp TIMES exp .
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 33 (exp)]
    MINUS      [reduce using rule 33 (exp)]
    TIMES      [reduce using rule 33 (exp)]
    DIVIDE     [reduce using rule 33 (exp)]
    AND        [reduce using rule 33 (exp)]
    OR         [reduce using rule 33 (exp)]
    EQUALS     [reduce using rule 33 (exp)]
    NOTEQUALS  [reduce using rule 33 (exp)]
    LESS       [reduce using rule 33 (exp)]
    GREATER    [reduce using rule 33 (exp)]
    LESSEQ     [reduce using rule 33 (exp)]
    GREATEREQ  [reduce using rule 33 (exp)]
    $default   reduce using rule 33 (exp)


State 109

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   34    | exp DIVIDE exp .
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 34 (exp)]
    MINUS      [reduce using rule 34 (exp)]
    TIMES      [reduce using rule 34 (exp)]
    DIVIDE     [reduce using rule 34 (exp)]
    AND        [reduce using rule 34 (exp)]
    OR         [reduce using rule 34 (exp)]
    EQUALS     [reduce using rule 34 (exp)]
    NOTEQUALS  [reduce using rule 34 (exp)]
    LESS       [reduce using rule 34 (exp)]
    GREATER    [reduce using rule 34 (exp)]
    LESSEQ     [reduce using rule 34 (exp)]
    GREATEREQ  [reduce using rule 34 (exp)]
    $default   reduce using rule 34 (exp)


State 110

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   36    | exp AND exp .
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 36 (exp)]
    MINUS      [reduce using rule 36 (exp)]
    TIMES      [reduce using rule 36 (exp)]
    DIVIDE     [reduce using rule 36 (exp)]
    AND        [reduce using rule 36 (exp)]
    OR         [reduce using rule 36 (exp)]
    EQUALS     [reduce using rule 36 (exp)]
    NOTEQUALS  [reduce using rule 36 (exp)]
    LESS       [reduce using rule 36 (exp)]
    GREATER    [reduce using rule 36 (exp)]
    LESSEQ     [reduce using rule 36 (exp)]
    GREATEREQ  [reduce using rule 36 (exp)]
    $default   reduce using rule 36 (exp)


State 111

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   37    | exp OR exp .
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 37 (exp)]
    MINUS      [reduce using rule 37 (exp)]
    TIMES      [reduce using rule 37 (exp)]
    DIVIDE     [reduce using rule 37 (exp)]
    AND        [reduce using rule 37 (exp)]
    OR         [reduce using rule 37 (exp)]
    EQUALS     [reduce using rule 37 (exp)]
    NOTEQUALS  [reduce using rule 37 (exp)]
    LESS       [reduce using rule 37 (exp)]
    GREATER    [reduce using rule 37 (exp)]
    LESSEQ     [reduce using rule 37 (exp)]
    GREATEREQ  [reduce using rule 37 (exp)]
    $default   reduce using rule 37 (exp)


State 112

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   38    | exp EQUALS exp .
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 38 (exp)]
    MINUS      [reduce using rule 38 (exp)]
    TIMES      [reduce using rule 38 (exp)]
    DIVIDE     [reduce using rule 38 (exp)]
    AND        [reduce using rule 38 (exp)]
    OR         [reduce using rule 38 (exp)]
    EQUALS     [reduce using rule 38 (exp)]
    NOTEQUALS  [reduce using rule 38 (exp)]
    LESS       [reduce using rule 38 (exp)]
    GREATER    [reduce using rule 38 (exp)]
    LESSEQ     [reduce using rule 38 (exp)]
    GREATEREQ  [reduce using rule 38 (exp)]
    $default   reduce using rule 38 (exp)


State 113

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   39    | exp NOTEQUALS exp .
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 39 (exp)]
    MINUS      [reduce using rule 39 (exp)]
    TIMES      [reduce using rule 39 (exp)]
    DIVIDE     [reduce using rule 39 (exp)]
    AND        [reduce using rule 39 (exp)]
    OR         [reduce using rule 39 (exp)]
    EQUALS     [reduce using rule 39 (exp)]
    NOTEQUALS  [reduce using rule 39 (exp)]
    LESS       [reduce using rule 39 (exp)]
    GREATER    [reduce using rule 39 (exp)]
    LESSEQ     [reduce using rule 39 (exp)]
    GREATEREQ  [reduce using rule 39 (exp)]
    $default   reduce using rule 39 (exp)


State 114

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   40    | exp LESS exp .
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 40 (exp)]
    MINUS      [reduce using rule 40 (exp)]
    TIMES      [reduce using rule 40 (exp)]
    DIVIDE     [reduce using rule 40 (exp)]
    AND        [reduce using rule 40 (exp)]
    OR         [reduce using rule 40 (exp)]
    EQUALS     [reduce using rule 40 (exp)]
    NOTEQUALS  [reduce using rule 40 (exp)]
    LESS       [reduce using rule 40 (exp)]
    GREATER    [reduce using rule 40 (exp)]
    LESSEQ     [reduce using rule 40 (exp)]
    GREATEREQ  [reduce using rule 40 (exp)]
    $default   reduce using rule 40 (exp)


State 115

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   41    | exp GREATER exp .
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 41 (exp)]
    MINUS      [reduce using rule 41 (exp)]
    TIMES      [reduce using rule 41 (exp)]
    DIVIDE     [reduce using rule 41 (exp)]
    AND        [reduce using rule 41 (exp)]
    OR         [reduce using rule 41 (exp)]
    EQUALS     [reduce using rule 41 (exp)]
    NOTEQUALS  [reduce using rule 41 (exp)]
    LESS       [reduce using rule 41 (exp)]
    GREATER    [reduce using rule 41 (exp)]
    LESSEQ     [reduce using rule 41 (exp)]
    GREATEREQ  [reduce using rule 41 (exp)]
    $default   reduce using rule 41 (exp)


State 116

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   42    | exp LESSEQ exp .
   43    | exp . GREATEREQ exp

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 42 (exp)]
    MINUS      [reduce using rule 42 (exp)]
    TIMES      [reduce using rule 42 (exp)]
    DIVIDE     [reduce using rule 42 (exp)]
    AND        [reduce using rule 42 (exp)]
    OR         [reduce using rule 42 (exp)]
    EQUALS     [reduce using rule 42 (exp)]
    NOTEQUALS  [reduce using rule 42 (exp)]
    LESS       [reduce using rule 42 (exp)]
    GREATER    [reduce using rule 42 (exp)]
    LESSEQ     [reduce using rule 42 (exp)]
    GREATEREQ  [reduce using rule 42 (exp)]
    $default   reduce using rule 42 (exp)


State 117

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp
   43    | exp GREATEREQ exp .

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    PLUS       [reduce using rule 43 (exp)]
    MINUS      [reduce using rule 43 (exp)]
    TIMES      [reduce using rule 43 (exp)]
    DIVIDE     [reduce using rule 43 (exp)]
    AND        [reduce using rule 43 (exp)]
    OR         [reduce using rule 43 (exp)]
    EQUALS     [reduce using rule 43 (exp)]
    NOTEQUALS  [reduce using rule 43 (exp)]
    LESS       [reduce using rule 43 (exp)]
    GREATER    [reduce using rule 43 (exp)]
    LESSEQ     [reduce using rule 43 (exp)]
    GREATEREQ  [reduce using rule 43 (exp)]
    $default   reduce using rule 43 (exp)


State 118

   55 fncall: id LPAREN actualList RPAREN .

    $default  reduce using rule 55 (fncall)


State 119

   57 actualList: actualList COMMA . exp

    TRUE           shift, and go to state 54
    FALSE          shift, and go to state 55
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 56
    STRINGLITERAL  shift, and go to state 57
    LPAREN         shift, and go to state 58
    MINUS          shift, and go to state 60
    NOT            shift, and go to state 61

    exp     go to state 122
    term    go to state 63
    fncall  go to state 64
    loc     go to state 65
    id      go to state 49


State 120

   25 stmt: IF LPAREN exp RPAREN LCURLY . declList stmtList RCURLY
   26     | IF LPAREN exp RPAREN LCURLY . declList stmtList RCURLY ELSE LCURLY declList stmtList RCURLY

    $default  reduce using rule 3 (declList)

    declList  go to state 123


State 121

   27 stmt: WHILE LPAREN exp RPAREN LCURLY . declList stmtList RCURLY

    $default  reduce using rule 3 (declList)

    declList  go to state 124


State 122

   31 exp: exp . PLUS exp
   32    | exp . MINUS exp
   33    | exp . TIMES exp
   34    | exp . DIVIDE exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQUALS exp
   39    | exp . NOTEQUALS exp
   40    | exp . LESS exp
   41    | exp . GREATER exp
   42    | exp . LESSEQ exp
   43    | exp . GREATEREQ exp
   57 actualList: actualList COMMA exp .

    PLUS       shift, and go to state 82
    MINUS      shift, and go to state 83
    TIMES      shift, and go to state 84
    DIVIDE     shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    EQUALS     shift, and go to state 88
    NOTEQUALS  shift, and go to state 89
    LESS       shift, and go to state 90
    GREATER    shift, and go to state 91
    LESSEQ     shift, and go to state 92
    GREATEREQ  shift, and go to state 93

    $default  reduce using rule 57 (actualList)


State 123

    2 declList: declList . decl
   25 stmt: IF LPAREN exp RPAREN LCURLY declList . stmtList RCURLY
   26     | IF LPAREN exp RPAREN LCURLY declList . stmtList RCURLY ELSE LCURLY declList stmtList RCURLY

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 7

    $default  reduce using rule 19 (stmtList)

    decl        go to state 8
    varDecl     go to state 9
    fnDecl      go to state 10
    structDecl  go to state 11
    stmtList    go to state 125
    type        go to state 12


State 124

    2 declList: declList . decl
   27 stmt: WHILE LPAREN exp RPAREN LCURLY declList . stmtList RCURLY

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 7

    $default  reduce using rule 19 (stmtList)

    decl        go to state 8
    varDecl     go to state 9
    fnDecl      go to state 10
    structDecl  go to state 11
    stmtList    go to state 126
    type        go to state 12


State 125

   18 stmtList: stmtList . stmt
   25 stmt: IF LPAREN exp RPAREN LCURLY declList stmtList . RCURLY
   26     | IF LPAREN exp RPAREN LCURLY declList stmtList . RCURLY ELSE LCURLY declList stmtList RCURLY

    INPUT   shift, and go to state 39
    OUTPUT  shift, and go to state 40
    IF      shift, and go to state 41
    WHILE   shift, and go to state 42
    RETURN  shift, and go to state 43
    ID      shift, and go to state 13
    RCURLY  shift, and go to state 127

    stmt       go to state 45
    assignExp  go to state 46
    fncall     go to state 47
    loc        go to state 48
    id         go to state 49


State 126

   18 stmtList: stmtList . stmt
   27 stmt: WHILE LPAREN exp RPAREN LCURLY declList stmtList . RCURLY

    INPUT   shift, and go to state 39
    OUTPUT  shift, and go to state 40
    IF      shift, and go to state 41
    WHILE   shift, and go to state 42
    RETURN  shift, and go to state 43
    ID      shift, and go to state 13
    RCURLY  shift, and go to state 128

    stmt       go to state 45
    assignExp  go to state 46
    fncall     go to state 47
    loc        go to state 48
    id         go to state 49


State 127

   25 stmt: IF LPAREN exp RPAREN LCURLY declList stmtList RCURLY .
   26     | IF LPAREN exp RPAREN LCURLY declList stmtList RCURLY . ELSE LCURLY declList stmtList RCURLY

    ELSE  shift, and go to state 129

    $default  reduce using rule 25 (stmt)


State 128

   27 stmt: WHILE LPAREN exp RPAREN LCURLY declList stmtList RCURLY .

    $default  reduce using rule 27 (stmt)


State 129

   26 stmt: IF LPAREN exp RPAREN LCURLY declList stmtList RCURLY ELSE . LCURLY declList stmtList RCURLY

    LCURLY  shift, and go to state 130


State 130

   26 stmt: IF LPAREN exp RPAREN LCURLY declList stmtList RCURLY ELSE LCURLY . declList stmtList RCURLY

    $default  reduce using rule 3 (declList)

    declList  go to state 131


State 131

    2 declList: declList . decl
   26 stmt: IF LPAREN exp RPAREN LCURLY declList stmtList RCURLY ELSE LCURLY declList . stmtList RCURLY

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 7

    $default  reduce using rule 19 (stmtList)

    decl        go to state 8
    varDecl     go to state 9
    fnDecl      go to state 10
    structDecl  go to state 11
    stmtList    go to state 132
    type        go to state 12


State 132

   18 stmtList: stmtList . stmt
   26 stmt: IF LPAREN exp RPAREN LCURLY declList stmtList RCURLY ELSE LCURLY declList stmtList . RCURLY

    INPUT   shift, and go to state 39
    OUTPUT  shift, and go to state 40
    IF      shift, and go to state 41
    WHILE   shift, and go to state 42
    RETURN  shift, and go to state 43
    ID      shift, and go to state 13
    RCURLY  shift, and go to state 133

    stmt       go to state 45
    assignExp  go to state 46
    fncall     go to state 47
    loc        go to state 48
    id         go to state 49


State 133

   26 stmt: IF LPAREN exp RPAREN LCURLY declList stmtList RCURLY ELSE LCURLY declList stmtList RCURLY .

    $default  reduce using rule 26 (stmt)
