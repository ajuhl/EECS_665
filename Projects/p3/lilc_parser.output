Terminals unused in grammar

   "newline"
   CHAR


State 81 conflicts: 12 shift/reduce
State 107 conflicts: 12 shift/reduce
State 108 conflicts: 12 shift/reduce
State 109 conflicts: 12 shift/reduce
State 110 conflicts: 12 shift/reduce
State 111 conflicts: 12 shift/reduce
State 112 conflicts: 12 shift/reduce
State 113 conflicts: 12 shift/reduce
State 114 conflicts: 12 shift/reduce
State 115 conflicts: 12 shift/reduce
State 116 conflicts: 12 shift/reduce
State 117 conflicts: 12 shift/reduce
State 118 conflicts: 12 shift/reduce


Grammar

    0 $accept: program "end of file"

    1 program: declList

    2 declList: declList decl
    3         | %empty

    4 decl: varDecl
    5     | structDecl
    6     | fnDecl

    7 varDeclList: varDeclList varDecl
    8            | %empty

    9 varDecl: type id SEMICOLON

   10 fnDecl: type id formals fnBody

   11 structDecl: STRUCT id LCURLY structBody RCURLY SEMICOLON

   12 structBody: structBody varDecl
   13           | varDecl

   14 formals: LPAREN RPAREN
   15        | LPAREN formalsList RPAREN

   16 formalsList: formalDecl
   17            | formalDecl COMMA formalsList

   18 formalDecl: type id

   19 fnBody: LCURLY varDeclList stmtList RCURLY

   20 stmtList: stmtList stmt
   21         | %empty

   22 stmt: assignExp SEMICOLON
   23     | loc PLUSPLUS SEMICOLON
   24     | loc MINUSMINUS SEMICOLON
   25     | INPUT READ loc SEMICOLON
   26     | OUTPUT WRITE exp SEMICOLON
   27     | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
   28     | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY
   29     | WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
   30     | RETURN exp SEMICOLON
   31     | RETURN SEMICOLON
   32     | fncall SEMICOLON

   33 exp: exp PLUS exp
   34    | exp MINUS exp
   35    | exp TIMES exp
   36    | exp DIVIDE exp
   37    | NOT exp
   38    | exp AND exp
   39    | exp OR exp
   40    | exp EQUALS exp
   41    | exp NOTEQUALS exp
   42    | exp LESS exp
   43    | exp GREATER exp
   44    | exp LESSEQ exp
   45    | exp GREATEREQ exp
   46    | MINUS term
   47    | term

   48 assignExp: loc ASSIGN exp

   49 term: loc
   50     | INTLITERAL
   51     | STRINGLITERAL
   52     | TRUE
   53     | FALSE
   54     | LPAREN exp RPAREN
   55     | fncall

   56 fncall: id LPAREN RPAREN
   57       | id LPAREN actualList RPAREN

   58 actualList: exp
   59           | actualList COMMA exp

   60 type: INT
   61     | BOOL
   62     | VOID

   63 loc: id
   64    | loc DOT id

   65 id: ID


Terminals, with rules where they appear

"end of file" (0) 0
error (256)
"newline" (258)
CHAR (259)
BOOL (260) 61
INT (261) 60
VOID (262) 62
TRUE (263) 52
FALSE (264) 53
STRUCT (265) 11
INPUT (266) 25
OUTPUT (267) 26
IF (268) 27 28
ELSE (269) 28
WHILE (270) 29
RETURN (271) 30 31
ID (272) 65
INTLITERAL (273) 50
STRINGLITERAL (274) 51
LCURLY (275) 11 19 27 28 29
RCURLY (276) 11 19 27 28 29
LPAREN (277) 14 15 27 28 29 54 56 57
RPAREN (278) 14 15 27 28 29 54 56 57
SEMICOLON (279) 9 11 22 23 24 25 26 30 31 32
COMMA (280) 17 59
DOT (281) 64
WRITE (282) 26
READ (283) 25
PLUSPLUS (284) 23
MINUSMINUS (285) 24
PLUS (286) 33
MINUS (287) 34 46
TIMES (288) 35
DIVIDE (289) 36
NOT (290) 37
AND (291) 38
OR (292) 39
EQUALS (293) 40
NOTEQUALS (294) 41
LESS (295) 42
GREATER (296) 43
LESSEQ (297) 44
GREATEREQ (298) 45
ASSIGN (299) 48


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1, on right: 0
declList (47)
    on left: 2 3, on right: 1 2
decl (48)
    on left: 4 5 6, on right: 2
varDeclList (49)
    on left: 7 8, on right: 7 19 27 28 29
varDecl (50)
    on left: 9, on right: 4 7 12 13
fnDecl (51)
    on left: 10, on right: 6
structDecl (52)
    on left: 11, on right: 5
structBody (53)
    on left: 12 13, on right: 11 12
formals (54)
    on left: 14 15, on right: 10
formalsList (55)
    on left: 16 17, on right: 15 17
formalDecl (56)
    on left: 18, on right: 16 17
fnBody (57)
    on left: 19, on right: 10
stmtList (58)
    on left: 20 21, on right: 19 20 27 28 29
stmt (59)
    on left: 22 23 24 25 26 27 28 29 30 31 32, on right: 20
exp (60)
    on left: 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47, on right:
    26 27 28 29 30 33 34 35 36 37 38 39 40 41 42 43 44 45 48 54 58
    59
assignExp (61)
    on left: 48, on right: 22
term (62)
    on left: 49 50 51 52 53 54 55, on right: 46 47
fncall (63)
    on left: 56 57, on right: 32 55
actualList (64)
    on left: 58 59, on right: 57 59
type (65)
    on left: 60 61 62, on right: 9 10 18
loc (66)
    on left: 63 64, on right: 23 24 25 48 49 64
id (67)
    on left: 65, on right: 9 10 11 18 56 57 63 64


State 0

    0 $accept: . program "end of file"

    $default  reduce using rule 3 (declList)

    program   go to state 1
    declList  go to state 2


State 1

    0 $accept: program . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 program: declList .
    2 declList: declList . decl

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    STRUCT  shift, and go to state 7

    $default  reduce using rule 1 (program)

    decl        go to state 8
    varDecl     go to state 9
    fnDecl      go to state 10
    structDecl  go to state 11
    type        go to state 12


State 3

    0 $accept: program "end of file" .

    $default  accept


State 4

   61 type: BOOL .

    $default  reduce using rule 61 (type)


State 5

   60 type: INT .

    $default  reduce using rule 60 (type)


State 6

   62 type: VOID .

    $default  reduce using rule 62 (type)


State 7

   11 structDecl: STRUCT . id LCURLY structBody RCURLY SEMICOLON

    ID  shift, and go to state 13

    id  go to state 14


State 8

    2 declList: declList decl .

    $default  reduce using rule 2 (declList)


State 9

    4 decl: varDecl .

    $default  reduce using rule 4 (decl)


State 10

    6 decl: fnDecl .

    $default  reduce using rule 6 (decl)


State 11

    5 decl: structDecl .

    $default  reduce using rule 5 (decl)


State 12

    9 varDecl: type . id SEMICOLON
   10 fnDecl: type . id formals fnBody

    ID  shift, and go to state 13

    id  go to state 15


State 13

   65 id: ID .

    $default  reduce using rule 65 (id)


State 14

   11 structDecl: STRUCT id . LCURLY structBody RCURLY SEMICOLON

    LCURLY  shift, and go to state 16


State 15

    9 varDecl: type id . SEMICOLON
   10 fnDecl: type id . formals fnBody

    LPAREN     shift, and go to state 17
    SEMICOLON  shift, and go to state 18

    formals  go to state 19


State 16

   11 structDecl: STRUCT id LCURLY . structBody RCURLY SEMICOLON

    BOOL  shift, and go to state 4
    INT   shift, and go to state 5
    VOID  shift, and go to state 6

    varDecl     go to state 20
    structBody  go to state 21
    type        go to state 22


State 17

   14 formals: LPAREN . RPAREN
   15        | LPAREN . formalsList RPAREN

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    RPAREN  shift, and go to state 23

    formalsList  go to state 24
    formalDecl   go to state 25
    type         go to state 26


State 18

    9 varDecl: type id SEMICOLON .

    $default  reduce using rule 9 (varDecl)


State 19

   10 fnDecl: type id formals . fnBody

    LCURLY  shift, and go to state 27

    fnBody  go to state 28


State 20

   13 structBody: varDecl .

    $default  reduce using rule 13 (structBody)


State 21

   11 structDecl: STRUCT id LCURLY structBody . RCURLY SEMICOLON
   12 structBody: structBody . varDecl

    BOOL    shift, and go to state 4
    INT     shift, and go to state 5
    VOID    shift, and go to state 6
    RCURLY  shift, and go to state 29

    varDecl  go to state 30
    type     go to state 22


State 22

    9 varDecl: type . id SEMICOLON

    ID  shift, and go to state 13

    id  go to state 31


State 23

   14 formals: LPAREN RPAREN .

    $default  reduce using rule 14 (formals)


State 24

   15 formals: LPAREN formalsList . RPAREN

    RPAREN  shift, and go to state 32


State 25

   16 formalsList: formalDecl .
   17            | formalDecl . COMMA formalsList

    COMMA  shift, and go to state 33

    $default  reduce using rule 16 (formalsList)


State 26

   18 formalDecl: type . id

    ID  shift, and go to state 13

    id  go to state 34


State 27

   19 fnBody: LCURLY . varDeclList stmtList RCURLY

    $default  reduce using rule 8 (varDeclList)

    varDeclList  go to state 35


State 28

   10 fnDecl: type id formals fnBody .

    $default  reduce using rule 10 (fnDecl)


State 29

   11 structDecl: STRUCT id LCURLY structBody RCURLY . SEMICOLON

    SEMICOLON  shift, and go to state 36


State 30

   12 structBody: structBody varDecl .

    $default  reduce using rule 12 (structBody)


State 31

    9 varDecl: type id . SEMICOLON

    SEMICOLON  shift, and go to state 18


State 32

   15 formals: LPAREN formalsList RPAREN .

    $default  reduce using rule 15 (formals)


State 33

   17 formalsList: formalDecl COMMA . formalsList

    BOOL  shift, and go to state 4
    INT   shift, and go to state 5
    VOID  shift, and go to state 6

    formalsList  go to state 37
    formalDecl   go to state 25
    type         go to state 26


State 34

   18 formalDecl: type id .

    $default  reduce using rule 18 (formalDecl)


State 35

    7 varDeclList: varDeclList . varDecl
   19 fnBody: LCURLY varDeclList . stmtList RCURLY

    BOOL  shift, and go to state 4
    INT   shift, and go to state 5
    VOID  shift, and go to state 6

    $default  reduce using rule 21 (stmtList)

    varDecl   go to state 38
    stmtList  go to state 39
    type      go to state 22


State 36

   11 structDecl: STRUCT id LCURLY structBody RCURLY SEMICOLON .

    $default  reduce using rule 11 (structDecl)


State 37

   17 formalsList: formalDecl COMMA formalsList .

    $default  reduce using rule 17 (formalsList)


State 38

    7 varDeclList: varDeclList varDecl .

    $default  reduce using rule 7 (varDeclList)


State 39

   19 fnBody: LCURLY varDeclList stmtList . RCURLY
   20 stmtList: stmtList . stmt

    INPUT   shift, and go to state 40
    OUTPUT  shift, and go to state 41
    IF      shift, and go to state 42
    WHILE   shift, and go to state 43
    RETURN  shift, and go to state 44
    ID      shift, and go to state 13
    RCURLY  shift, and go to state 45

    stmt       go to state 46
    assignExp  go to state 47
    fncall     go to state 48
    loc        go to state 49
    id         go to state 50


State 40

   25 stmt: INPUT . READ loc SEMICOLON

    READ  shift, and go to state 51


State 41

   26 stmt: OUTPUT . WRITE exp SEMICOLON

    WRITE  shift, and go to state 52


State 42

   27 stmt: IF . LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
   28     | IF . LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY

    LPAREN  shift, and go to state 53


State 43

   29 stmt: WHILE . LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY

    LPAREN  shift, and go to state 54


State 44

   30 stmt: RETURN . exp SEMICOLON
   31     | RETURN . SEMICOLON

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    SEMICOLON      shift, and go to state 60
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 63
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 45

   19 fnBody: LCURLY varDeclList stmtList RCURLY .

    $default  reduce using rule 19 (fnBody)


State 46

   20 stmtList: stmtList stmt .

    $default  reduce using rule 20 (stmtList)


State 47

   22 stmt: assignExp . SEMICOLON

    SEMICOLON  shift, and go to state 67


State 48

   32 stmt: fncall . SEMICOLON

    SEMICOLON  shift, and go to state 68


State 49

   23 stmt: loc . PLUSPLUS SEMICOLON
   24     | loc . MINUSMINUS SEMICOLON
   48 assignExp: loc . ASSIGN exp
   64 loc: loc . DOT id

    DOT         shift, and go to state 69
    PLUSPLUS    shift, and go to state 70
    MINUSMINUS  shift, and go to state 71
    ASSIGN      shift, and go to state 72


State 50

   56 fncall: id . LPAREN RPAREN
   57       | id . LPAREN actualList RPAREN
   63 loc: id .

    LPAREN  shift, and go to state 73

    $default  reduce using rule 63 (loc)


State 51

   25 stmt: INPUT READ . loc SEMICOLON

    ID  shift, and go to state 13

    loc  go to state 74
    id   go to state 75


State 52

   26 stmt: OUTPUT WRITE . exp SEMICOLON

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 76
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 53

   27 stmt: IF LPAREN . exp RPAREN LCURLY varDeclList stmtList RCURLY
   28     | IF LPAREN . exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 77
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 54

   29 stmt: WHILE LPAREN . exp RPAREN LCURLY varDeclList stmtList RCURLY

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 78
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 55

   52 term: TRUE .

    $default  reduce using rule 52 (term)


State 56

   53 term: FALSE .

    $default  reduce using rule 53 (term)


State 57

   50 term: INTLITERAL .

    $default  reduce using rule 50 (term)


State 58

   51 term: STRINGLITERAL .

    $default  reduce using rule 51 (term)


State 59

   54 term: LPAREN . exp RPAREN

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 79
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 60

   31 stmt: RETURN SEMICOLON .

    $default  reduce using rule 31 (stmt)


State 61

   46 exp: MINUS . term

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59

    term    go to state 80
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 62

   37 exp: NOT . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 81
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 63

   30 stmt: RETURN exp . SEMICOLON
   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    SEMICOLON  shift, and go to state 82
    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94


State 64

   47 exp: term .

    $default  reduce using rule 47 (exp)


State 65

   55 term: fncall .

    $default  reduce using rule 55 (term)


State 66

   49 term: loc .
   64 loc: loc . DOT id

    DOT  shift, and go to state 69

    $default  reduce using rule 49 (term)


State 67

   22 stmt: assignExp SEMICOLON .

    $default  reduce using rule 22 (stmt)


State 68

   32 stmt: fncall SEMICOLON .

    $default  reduce using rule 32 (stmt)


State 69

   64 loc: loc DOT . id

    ID  shift, and go to state 13

    id  go to state 95


State 70

   23 stmt: loc PLUSPLUS . SEMICOLON

    SEMICOLON  shift, and go to state 96


State 71

   24 stmt: loc MINUSMINUS . SEMICOLON

    SEMICOLON  shift, and go to state 97


State 72

   48 assignExp: loc ASSIGN . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 98
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 73

   56 fncall: id LPAREN . RPAREN
   57       | id LPAREN . actualList RPAREN

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    RPAREN         shift, and go to state 99
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp         go to state 100
    term        go to state 64
    fncall      go to state 65
    actualList  go to state 101
    loc         go to state 66
    id          go to state 50


State 74

   25 stmt: INPUT READ loc . SEMICOLON
   64 loc: loc . DOT id

    SEMICOLON  shift, and go to state 102
    DOT        shift, and go to state 69


State 75

   63 loc: id .

    $default  reduce using rule 63 (loc)


State 76

   26 stmt: OUTPUT WRITE exp . SEMICOLON
   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    SEMICOLON  shift, and go to state 103
    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94


State 77

   27 stmt: IF LPAREN exp . RPAREN LCURLY varDeclList stmtList RCURLY
   28     | IF LPAREN exp . RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY
   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    RPAREN     shift, and go to state 104
    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94


State 78

   29 stmt: WHILE LPAREN exp . RPAREN LCURLY varDeclList stmtList RCURLY
   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    RPAREN     shift, and go to state 105
    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94


State 79

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp
   54 term: LPAREN exp . RPAREN

    RPAREN     shift, and go to state 106
    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94


State 80

   46 exp: MINUS term .

    $default  reduce using rule 46 (exp)


State 81

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   37    | NOT exp .
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 37 (exp)]
    MINUS      [reduce using rule 37 (exp)]
    TIMES      [reduce using rule 37 (exp)]
    DIVIDE     [reduce using rule 37 (exp)]
    AND        [reduce using rule 37 (exp)]
    OR         [reduce using rule 37 (exp)]
    EQUALS     [reduce using rule 37 (exp)]
    NOTEQUALS  [reduce using rule 37 (exp)]
    LESS       [reduce using rule 37 (exp)]
    GREATER    [reduce using rule 37 (exp)]
    LESSEQ     [reduce using rule 37 (exp)]
    GREATEREQ  [reduce using rule 37 (exp)]
    $default   reduce using rule 37 (exp)


State 82

   30 stmt: RETURN exp SEMICOLON .

    $default  reduce using rule 30 (stmt)


State 83

   33 exp: exp PLUS . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 107
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 84

   34 exp: exp MINUS . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 108
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 85

   35 exp: exp TIMES . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 109
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 86

   36 exp: exp DIVIDE . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 110
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 87

   38 exp: exp AND . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 111
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 88

   39 exp: exp OR . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 112
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 89

   40 exp: exp EQUALS . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 113
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 90

   41 exp: exp NOTEQUALS . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 114
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 91

   42 exp: exp LESS . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 115
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 92

   43 exp: exp GREATER . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 116
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 93

   44 exp: exp LESSEQ . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 117
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 94

   45 exp: exp GREATEREQ . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 118
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 95

   64 loc: loc DOT id .

    $default  reduce using rule 64 (loc)


State 96

   23 stmt: loc PLUSPLUS SEMICOLON .

    $default  reduce using rule 23 (stmt)


State 97

   24 stmt: loc MINUSMINUS SEMICOLON .

    $default  reduce using rule 24 (stmt)


State 98

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp
   48 assignExp: loc ASSIGN exp .

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    $default  reduce using rule 48 (assignExp)


State 99

   56 fncall: id LPAREN RPAREN .

    $default  reduce using rule 56 (fncall)


State 100

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp
   58 actualList: exp .

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    $default  reduce using rule 58 (actualList)


State 101

   57 fncall: id LPAREN actualList . RPAREN
   59 actualList: actualList . COMMA exp

    RPAREN  shift, and go to state 119
    COMMA   shift, and go to state 120


State 102

   25 stmt: INPUT READ loc SEMICOLON .

    $default  reduce using rule 25 (stmt)


State 103

   26 stmt: OUTPUT WRITE exp SEMICOLON .

    $default  reduce using rule 26 (stmt)


State 104

   27 stmt: IF LPAREN exp RPAREN . LCURLY varDeclList stmtList RCURLY
   28     | IF LPAREN exp RPAREN . LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY

    LCURLY  shift, and go to state 121


State 105

   29 stmt: WHILE LPAREN exp RPAREN . LCURLY varDeclList stmtList RCURLY

    LCURLY  shift, and go to state 122


State 106

   54 term: LPAREN exp RPAREN .

    $default  reduce using rule 54 (term)


State 107

   33 exp: exp . PLUS exp
   33    | exp PLUS exp .
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 33 (exp)]
    MINUS      [reduce using rule 33 (exp)]
    TIMES      [reduce using rule 33 (exp)]
    DIVIDE     [reduce using rule 33 (exp)]
    AND        [reduce using rule 33 (exp)]
    OR         [reduce using rule 33 (exp)]
    EQUALS     [reduce using rule 33 (exp)]
    NOTEQUALS  [reduce using rule 33 (exp)]
    LESS       [reduce using rule 33 (exp)]
    GREATER    [reduce using rule 33 (exp)]
    LESSEQ     [reduce using rule 33 (exp)]
    GREATEREQ  [reduce using rule 33 (exp)]
    $default   reduce using rule 33 (exp)


State 108

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   34    | exp MINUS exp .
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 34 (exp)]
    MINUS      [reduce using rule 34 (exp)]
    TIMES      [reduce using rule 34 (exp)]
    DIVIDE     [reduce using rule 34 (exp)]
    AND        [reduce using rule 34 (exp)]
    OR         [reduce using rule 34 (exp)]
    EQUALS     [reduce using rule 34 (exp)]
    NOTEQUALS  [reduce using rule 34 (exp)]
    LESS       [reduce using rule 34 (exp)]
    GREATER    [reduce using rule 34 (exp)]
    LESSEQ     [reduce using rule 34 (exp)]
    GREATEREQ  [reduce using rule 34 (exp)]
    $default   reduce using rule 34 (exp)


State 109

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   35    | exp TIMES exp .
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 35 (exp)]
    MINUS      [reduce using rule 35 (exp)]
    TIMES      [reduce using rule 35 (exp)]
    DIVIDE     [reduce using rule 35 (exp)]
    AND        [reduce using rule 35 (exp)]
    OR         [reduce using rule 35 (exp)]
    EQUALS     [reduce using rule 35 (exp)]
    NOTEQUALS  [reduce using rule 35 (exp)]
    LESS       [reduce using rule 35 (exp)]
    GREATER    [reduce using rule 35 (exp)]
    LESSEQ     [reduce using rule 35 (exp)]
    GREATEREQ  [reduce using rule 35 (exp)]
    $default   reduce using rule 35 (exp)


State 110

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   36    | exp DIVIDE exp .
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 36 (exp)]
    MINUS      [reduce using rule 36 (exp)]
    TIMES      [reduce using rule 36 (exp)]
    DIVIDE     [reduce using rule 36 (exp)]
    AND        [reduce using rule 36 (exp)]
    OR         [reduce using rule 36 (exp)]
    EQUALS     [reduce using rule 36 (exp)]
    NOTEQUALS  [reduce using rule 36 (exp)]
    LESS       [reduce using rule 36 (exp)]
    GREATER    [reduce using rule 36 (exp)]
    LESSEQ     [reduce using rule 36 (exp)]
    GREATEREQ  [reduce using rule 36 (exp)]
    $default   reduce using rule 36 (exp)


State 111

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   38    | exp AND exp .
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 38 (exp)]
    MINUS      [reduce using rule 38 (exp)]
    TIMES      [reduce using rule 38 (exp)]
    DIVIDE     [reduce using rule 38 (exp)]
    AND        [reduce using rule 38 (exp)]
    OR         [reduce using rule 38 (exp)]
    EQUALS     [reduce using rule 38 (exp)]
    NOTEQUALS  [reduce using rule 38 (exp)]
    LESS       [reduce using rule 38 (exp)]
    GREATER    [reduce using rule 38 (exp)]
    LESSEQ     [reduce using rule 38 (exp)]
    GREATEREQ  [reduce using rule 38 (exp)]
    $default   reduce using rule 38 (exp)


State 112

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   39    | exp OR exp .
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 39 (exp)]
    MINUS      [reduce using rule 39 (exp)]
    TIMES      [reduce using rule 39 (exp)]
    DIVIDE     [reduce using rule 39 (exp)]
    AND        [reduce using rule 39 (exp)]
    OR         [reduce using rule 39 (exp)]
    EQUALS     [reduce using rule 39 (exp)]
    NOTEQUALS  [reduce using rule 39 (exp)]
    LESS       [reduce using rule 39 (exp)]
    GREATER    [reduce using rule 39 (exp)]
    LESSEQ     [reduce using rule 39 (exp)]
    GREATEREQ  [reduce using rule 39 (exp)]
    $default   reduce using rule 39 (exp)


State 113

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   40    | exp EQUALS exp .
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 40 (exp)]
    MINUS      [reduce using rule 40 (exp)]
    TIMES      [reduce using rule 40 (exp)]
    DIVIDE     [reduce using rule 40 (exp)]
    AND        [reduce using rule 40 (exp)]
    OR         [reduce using rule 40 (exp)]
    EQUALS     [reduce using rule 40 (exp)]
    NOTEQUALS  [reduce using rule 40 (exp)]
    LESS       [reduce using rule 40 (exp)]
    GREATER    [reduce using rule 40 (exp)]
    LESSEQ     [reduce using rule 40 (exp)]
    GREATEREQ  [reduce using rule 40 (exp)]
    $default   reduce using rule 40 (exp)


State 114

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   41    | exp NOTEQUALS exp .
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 41 (exp)]
    MINUS      [reduce using rule 41 (exp)]
    TIMES      [reduce using rule 41 (exp)]
    DIVIDE     [reduce using rule 41 (exp)]
    AND        [reduce using rule 41 (exp)]
    OR         [reduce using rule 41 (exp)]
    EQUALS     [reduce using rule 41 (exp)]
    NOTEQUALS  [reduce using rule 41 (exp)]
    LESS       [reduce using rule 41 (exp)]
    GREATER    [reduce using rule 41 (exp)]
    LESSEQ     [reduce using rule 41 (exp)]
    GREATEREQ  [reduce using rule 41 (exp)]
    $default   reduce using rule 41 (exp)


State 115

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   42    | exp LESS exp .
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 42 (exp)]
    MINUS      [reduce using rule 42 (exp)]
    TIMES      [reduce using rule 42 (exp)]
    DIVIDE     [reduce using rule 42 (exp)]
    AND        [reduce using rule 42 (exp)]
    OR         [reduce using rule 42 (exp)]
    EQUALS     [reduce using rule 42 (exp)]
    NOTEQUALS  [reduce using rule 42 (exp)]
    LESS       [reduce using rule 42 (exp)]
    GREATER    [reduce using rule 42 (exp)]
    LESSEQ     [reduce using rule 42 (exp)]
    GREATEREQ  [reduce using rule 42 (exp)]
    $default   reduce using rule 42 (exp)


State 116

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   43    | exp GREATER exp .
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 43 (exp)]
    MINUS      [reduce using rule 43 (exp)]
    TIMES      [reduce using rule 43 (exp)]
    DIVIDE     [reduce using rule 43 (exp)]
    AND        [reduce using rule 43 (exp)]
    OR         [reduce using rule 43 (exp)]
    EQUALS     [reduce using rule 43 (exp)]
    NOTEQUALS  [reduce using rule 43 (exp)]
    LESS       [reduce using rule 43 (exp)]
    GREATER    [reduce using rule 43 (exp)]
    LESSEQ     [reduce using rule 43 (exp)]
    GREATEREQ  [reduce using rule 43 (exp)]
    $default   reduce using rule 43 (exp)


State 117

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   44    | exp LESSEQ exp .
   45    | exp . GREATEREQ exp

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 44 (exp)]
    MINUS      [reduce using rule 44 (exp)]
    TIMES      [reduce using rule 44 (exp)]
    DIVIDE     [reduce using rule 44 (exp)]
    AND        [reduce using rule 44 (exp)]
    OR         [reduce using rule 44 (exp)]
    EQUALS     [reduce using rule 44 (exp)]
    NOTEQUALS  [reduce using rule 44 (exp)]
    LESS       [reduce using rule 44 (exp)]
    GREATER    [reduce using rule 44 (exp)]
    LESSEQ     [reduce using rule 44 (exp)]
    GREATEREQ  [reduce using rule 44 (exp)]
    $default   reduce using rule 44 (exp)


State 118

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp
   45    | exp GREATEREQ exp .

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    PLUS       [reduce using rule 45 (exp)]
    MINUS      [reduce using rule 45 (exp)]
    TIMES      [reduce using rule 45 (exp)]
    DIVIDE     [reduce using rule 45 (exp)]
    AND        [reduce using rule 45 (exp)]
    OR         [reduce using rule 45 (exp)]
    EQUALS     [reduce using rule 45 (exp)]
    NOTEQUALS  [reduce using rule 45 (exp)]
    LESS       [reduce using rule 45 (exp)]
    GREATER    [reduce using rule 45 (exp)]
    LESSEQ     [reduce using rule 45 (exp)]
    GREATEREQ  [reduce using rule 45 (exp)]
    $default   reduce using rule 45 (exp)


State 119

   57 fncall: id LPAREN actualList RPAREN .

    $default  reduce using rule 57 (fncall)


State 120

   59 actualList: actualList COMMA . exp

    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    ID             shift, and go to state 13
    INTLITERAL     shift, and go to state 57
    STRINGLITERAL  shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 61
    NOT            shift, and go to state 62

    exp     go to state 123
    term    go to state 64
    fncall  go to state 65
    loc     go to state 66
    id      go to state 50


State 121

   27 stmt: IF LPAREN exp RPAREN LCURLY . varDeclList stmtList RCURLY
   28     | IF LPAREN exp RPAREN LCURLY . varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY

    $default  reduce using rule 8 (varDeclList)

    varDeclList  go to state 124


State 122

   29 stmt: WHILE LPAREN exp RPAREN LCURLY . varDeclList stmtList RCURLY

    $default  reduce using rule 8 (varDeclList)

    varDeclList  go to state 125


State 123

   33 exp: exp . PLUS exp
   34    | exp . MINUS exp
   35    | exp . TIMES exp
   36    | exp . DIVIDE exp
   38    | exp . AND exp
   39    | exp . OR exp
   40    | exp . EQUALS exp
   41    | exp . NOTEQUALS exp
   42    | exp . LESS exp
   43    | exp . GREATER exp
   44    | exp . LESSEQ exp
   45    | exp . GREATEREQ exp
   59 actualList: actualList COMMA exp .

    PLUS       shift, and go to state 83
    MINUS      shift, and go to state 84
    TIMES      shift, and go to state 85
    DIVIDE     shift, and go to state 86
    AND        shift, and go to state 87
    OR         shift, and go to state 88
    EQUALS     shift, and go to state 89
    NOTEQUALS  shift, and go to state 90
    LESS       shift, and go to state 91
    GREATER    shift, and go to state 92
    LESSEQ     shift, and go to state 93
    GREATEREQ  shift, and go to state 94

    $default  reduce using rule 59 (actualList)


State 124

    7 varDeclList: varDeclList . varDecl
   27 stmt: IF LPAREN exp RPAREN LCURLY varDeclList . stmtList RCURLY
   28     | IF LPAREN exp RPAREN LCURLY varDeclList . stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY

    BOOL  shift, and go to state 4
    INT   shift, and go to state 5
    VOID  shift, and go to state 6

    $default  reduce using rule 21 (stmtList)

    varDecl   go to state 38
    stmtList  go to state 126
    type      go to state 22


State 125

    7 varDeclList: varDeclList . varDecl
   29 stmt: WHILE LPAREN exp RPAREN LCURLY varDeclList . stmtList RCURLY

    BOOL  shift, and go to state 4
    INT   shift, and go to state 5
    VOID  shift, and go to state 6

    $default  reduce using rule 21 (stmtList)

    varDecl   go to state 38
    stmtList  go to state 127
    type      go to state 22


State 126

   20 stmtList: stmtList . stmt
   27 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList . RCURLY
   28     | IF LPAREN exp RPAREN LCURLY varDeclList stmtList . RCURLY ELSE LCURLY varDeclList stmtList RCURLY

    INPUT   shift, and go to state 40
    OUTPUT  shift, and go to state 41
    IF      shift, and go to state 42
    WHILE   shift, and go to state 43
    RETURN  shift, and go to state 44
    ID      shift, and go to state 13
    RCURLY  shift, and go to state 128

    stmt       go to state 46
    assignExp  go to state 47
    fncall     go to state 48
    loc        go to state 49
    id         go to state 50


State 127

   20 stmtList: stmtList . stmt
   29 stmt: WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList . RCURLY

    INPUT   shift, and go to state 40
    OUTPUT  shift, and go to state 41
    IF      shift, and go to state 42
    WHILE   shift, and go to state 43
    RETURN  shift, and go to state 44
    ID      shift, and go to state 13
    RCURLY  shift, and go to state 129

    stmt       go to state 46
    assignExp  go to state 47
    fncall     go to state 48
    loc        go to state 49
    id         go to state 50


State 128

   27 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY .
   28     | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY . ELSE LCURLY varDeclList stmtList RCURLY

    ELSE  shift, and go to state 130

    $default  reduce using rule 27 (stmt)


State 129

   29 stmt: WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY .

    $default  reduce using rule 29 (stmt)


State 130

   28 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE . LCURLY varDeclList stmtList RCURLY

    LCURLY  shift, and go to state 131


State 131

   28 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY . varDeclList stmtList RCURLY

    $default  reduce using rule 8 (varDeclList)

    varDeclList  go to state 132


State 132

    7 varDeclList: varDeclList . varDecl
   28 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList . stmtList RCURLY

    BOOL  shift, and go to state 4
    INT   shift, and go to state 5
    VOID  shift, and go to state 6

    $default  reduce using rule 21 (stmtList)

    varDecl   go to state 38
    stmtList  go to state 133
    type      go to state 22


State 133

   20 stmtList: stmtList . stmt
   28 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList . RCURLY

    INPUT   shift, and go to state 40
    OUTPUT  shift, and go to state 41
    IF      shift, and go to state 42
    WHILE   shift, and go to state 43
    RETURN  shift, and go to state 44
    ID      shift, and go to state 13
    RCURLY  shift, and go to state 134

    stmt       go to state 46
    assignExp  go to state 47
    fncall     go to state 48
    loc        go to state 49
    id         go to state 50


State 134

   28 stmt: IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY .

    $default  reduce using rule 28 (stmt)
